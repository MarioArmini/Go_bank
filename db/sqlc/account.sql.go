// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "Accounts" (
    owner,
    balance,
    currency,
    "interestRate"
) VALUES (
    $1, $2, $3, $4
) RETURNING "Id", owner, balance, currency, "creationTime", "countryCode", "interestRate"
`

type CreateAccountParams struct {
	Owner        string `json:"owner"`
	Balance      int64  `json:"balance"`
	Currency     string `json:"currency"`
	InterestRate string `json:"interestRate"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Owner,
		arg.Balance,
		arg.Currency,
		arg.InterestRate,
	)
	var i Accounts
	err := row.Scan(
		&i.Id,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreationTime,
		&i.CountryCode,
		&i.InterestRate,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "Accounts" WHERE "Id" = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT "Id", owner, balance, currency, "creationTime", "countryCode", "interestRate" FROM "Accounts"
WHERE "Id" = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Accounts
	err := row.Scan(
		&i.Id,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreationTime,
		&i.CountryCode,
		&i.InterestRate,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT "Id", owner, balance, currency, "creationTime", "countryCode", "interestRate" FROM "Accounts"
WHERE "Id" = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Accounts
	err := row.Scan(
		&i.Id,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreationTime,
		&i.CountryCode,
		&i.InterestRate,
	)
	return i, err
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT "Id", owner, balance, currency, "creationTime", "countryCode", "interestRate" FROM "Accounts"
ORDER BY "Id"
LIMIT $1
OFFSET $2
`

type GetAllAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAccounts(ctx context.Context, arg GetAllAccountsParams) ([]Accounts, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Accounts
	for rows.Next() {
		var i Accounts
		if err := rows.Scan(
			&i.Id,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreationTime,
			&i.CountryCode,
			&i.InterestRate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBalance = `-- name: GetBalance :one
SELECT balance FROM "Accounts"
WHERE "Id" = $1
`

func (q *Queries) GetBalance(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBalance, id)
	var balance int64
	err := row.Scan(&balance)
	return balance, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "Accounts"
SET balance = $2
WHERE "Id" = $1
RETURNING "Id", owner, balance, currency, "creationTime", "countryCode", "interestRate"
`

type UpdateAccountParams struct {
	Id      int64 `json:"Id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.Id, arg.Balance)
	var i Accounts
	err := row.Scan(
		&i.Id,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreationTime,
		&i.CountryCode,
		&i.InterestRate,
	)
	return i, err
}
