// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entry.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO "Entries"(
    "accountId",
    amount
) VALUES(
    $1, $2
) RETURNING "Id", "accountId", amount, "creationTime"
`

type CreateEntryParams struct {
	AccountId int64 `json:"accountId"`
	Amount    int64 `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entries, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountId, arg.Amount)
	var i Entries
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.Amount,
		&i.CreationTime,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM "Entries" WHERE "Id" = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getAllEntries = `-- name: GetAllEntries :many
SELECT "Id", "accountId", amount, "creationTime" FROM "Entries"
ORDER BY "Id"
LIMIT $1
OFFSET $2
`

type GetAllEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllEntries(ctx context.Context, arg GetAllEntriesParams) ([]Entries, error) {
	rows, err := q.db.QueryContext(ctx, getAllEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entries
	for rows.Next() {
		var i Entries
		if err := rows.Scan(
			&i.Id,
			&i.AccountId,
			&i.Amount,
			&i.CreationTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntry = `-- name: GetEntry :one
SELECT "Id", "accountId", amount, "creationTime" FROM "Entries" 
WHERE "Id" = $1
LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entries, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entries
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.Amount,
		&i.CreationTime,
	)
	return i, err
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE "Entries"
SET amount = $2
WHERE "Id" = $1
RETURNING "Id", "accountId", amount, "creationTime"
`

type UpdateEntryParams struct {
	Id     int64 `json:"Id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entries, error) {
	row := q.db.QueryRowContext(ctx, updateEntry, arg.Id, arg.Amount)
	var i Entries
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.Amount,
		&i.CreationTime,
	)
	return i, err
}
