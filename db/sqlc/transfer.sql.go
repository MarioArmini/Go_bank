// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO "Transfers"(
    "senderId",
    "recipientId",
    amount
) VALUES(
    $1, $2, $3
) RETURNING "Id", "senderId", "recipientId", amount, "creationTime"
`

type CreateTransferParams struct {
	SenderId    int64 `json:"senderId"`
	RecipientId int64 `json:"recipientId"`
	Amount      int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.SenderId, arg.RecipientId, arg.Amount)
	var i Transfers
	err := row.Scan(
		&i.Id,
		&i.SenderId,
		&i.RecipientId,
		&i.Amount,
		&i.CreationTime,
	)
	return i, err
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE FROM "Transfers" WHERE "Id" = $1
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransfer, id)
	return err
}

const getAllTransfers = `-- name: GetAllTransfers :many
SELECT "Id", "senderId", "recipientId", amount, "creationTime" FROM "Transfers"
ORDER BY "Id"
LIMIT $1
OFFSET $2
`

type GetAllTransfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllTransfers(ctx context.Context, arg GetAllTransfersParams) ([]Transfers, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfers
	for rows.Next() {
		var i Transfers
		if err := rows.Scan(
			&i.Id,
			&i.SenderId,
			&i.RecipientId,
			&i.Amount,
			&i.CreationTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfer = `-- name: GetTransfer :one
SELECT "Id", "senderId", "recipientId", amount, "creationTime" FROM "Transfers"
WHERE "Id" = $1
LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfers
	err := row.Scan(
		&i.Id,
		&i.SenderId,
		&i.RecipientId,
		&i.Amount,
		&i.CreationTime,
	)
	return i, err
}
